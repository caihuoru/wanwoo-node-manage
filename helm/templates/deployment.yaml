apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  labels:
    app: {{ .Values.deployment.name }}
spec:
  replicas: {{ .Values.deployment.replicas }} # 副本数量
  selector:
    matchLabels:
      app: {{ .Values.deployment.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.deployment.name }}
    spec:
      # imagePullSecrets:
      #   - name: docker-registry-secret
      tolerations: 
        - key: "node.kubernetes.io/not-ready" 
          operator: "Exists" 
          effect: "NoExecute" 
          tolerationSeconds: 10 
        - key: "node.kubernetes.io/unreachable" 
          operator: "Exists" 
          effect: "NoExecute" 
          tolerationSeconds: 10
      containers:
        - name: {{ .Values.deployment.name }}
          image: '{{ .Values.deployment.image }}:{{ .Values.deployment.imageTag }}' # 镜像版本
          imagePullPolicy: {{ .Values.deployment.imagePullPolicy }}
          command: ["sh", "-c", "mc config host add minio {{ .Values.minio.path }} {{ .Values.minio.rootUser }} {{ .Values.minio.rootPassword }} --api s3v4 && mkdir /ssl && mkdir /ssl/rabbitmq && mkdir /ssl/https && mkdir /mnt/download && mc mirror minio/uecm-ssl/rabbitmq /ssl/rabbitmq && mc mirror minio/uecm-ssl/https /ssl/https && yarn && yarn start"]          
          ports:
            - containerPort: {{ .Values.service.targetPort }} # POD端口
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          livenessProbe:
            tcpSocket: 
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: 60
            periodSeconds: 120
          readinessProbe: 
            tcpSocket: 
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            limits:
              memory: 2500Mi
            requests:
              memory: 500Mi
          volumeMounts:
            - name: config-index-js
              mountPath: /opt/node_app/config/index.js
              subPath: index.js
            - name: config-cloud-js
              mountPath: /opt/node_app/config/config.cloud.js
              subPath: config.cloud.js
      volumes:
        - name: config-index-js
          configMap:
            name: {{ .Values.configMap.name }}
            items:
              - key: config.index.js
                path: index.js
        - name: config-cloud-js
          configMap:
            name: {{ .Values.configMap.name }}
            items:
              - key: config.cloud.js
                path: config.cloud.js
      initContainers:
        - name: wait-for-uecm-share-init-oss-files
          image: k8s-kubectl:1.0.0 
          command: ['sh', '-c', 'kubectl wait --timeout=-1s --for=condition=Complete job/uecm-share-init-oss-files --namespace=default']
        - name: init-operation-center
          image: k8s-wait-for-endpoint:1.0.0
          args: ['--name=operation-center', '--namespace={{ .Release.Namespace }}']