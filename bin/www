#!/usr/bin/env node

/**
 * Module dependencies.
 */
// 获取环境配置 前置获取本地配置或者远程nacos配置
const fs = require('fs');
const {getLocalIP} = require('../util/lib');
const http = require('http');
const https = require('https');
const debug = require('debug')('demo:server');
const config = require('../config');
(async ()=>{
    //获取当前ip及hostName
    global.localIP = getLocalIP().ip
    global.localHostName = getLocalIP().hostName
    /**
     * 选择是否使用远程配置
     */
    const {initNacosConfig,initNacosInstance} = require('../nacos');
    await initNacosInstance(); //注册nacos
    if(config.isRemoteConfig){
        await initNacosConfig(); //使用远程配置
    }else{
        for (const k in config ) { //使用本地配置
            global[k] = config[k] 
        }
    }
    // 创建服务
    const app = require('../app');
    // 服务使用端口
    const port = normalizePort(global.APP_PORT || '3000');
    /**
     * 是否使用https
     */
    let server = null
    if(global.isHTTPS){
        const options = {
            key: fs.readFileSync(global.HTTPS_KEY),  //ssl文件路径
            cert: fs.readFileSync(global.HTTPS_CERT)  //ssl文件路径
        }
        server = https.createServer(options,app.callback());
    }else{
        server = http.createServer(app.callback());
    }
    const Socket = require('../socket/index');
    /**
     * Create SOCKET server.
     */
    Socket.creatSocket(server,app);
    server.listen(port);
    console.log('Listening on :'+ port)
    server.on('error', onError);
    server.on('listening', onListening);
    function normalizePort(val) {
        var port = parseInt(val, 10);
        if (isNaN(port)) {
          // named pipe
          return val;
        }
    
        if (port >= 0) {
          // port number
          return port;
        }
        return false;
    }
    function onError(error) {
        if (error.syscall !== 'listen') {
          throw error;
        }
    
        var bind = typeof port === 'string'
          ? 'Pipe ' + port
          : 'Port ' + port;
    
        // handle specific listen errors with friendly messages
        switch (error.code) {
          case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
          case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
          default:
            throw error;
        }
    }
    function onListening() {
        const addr = server.address();
        const bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
})()